#!/bin/sh
# This is my statusbar script for dwm, it display modules like:
# the weather (with the moon phase at night), uptime, date, time
# and even your battery life if you have a laptop.
# Every module is actually just a variable displayed with xsetroot
# You can change the date and time format, module emojis, and
# the delimiter to your liking.
#
# You should also change the location variable
#to your city to get correct weather forecasts

uptime_emoji="ðŸ˜Ž"
date_emoji="ðŸ“†"
time_emoji="ðŸ•˜"
music_emoji="ðŸŽ§"
battery_emoji_high="ðŸ”‹"
battery_emoji_low="ðŸª«"
delimeter=" | "
# The delimiter must be set inside the module variable otherwise if a module
# ends up not being used we will have useless delimiters in the statusbar

# Weather config
timer=1                     # Timer to update the weather
updatetime=1600             # Time after how long to update in seconds 3600=1h
location="angers"           # What city to get weather information about

# This is a procedure to set and update the weather every so often
set_weather() {
	# if it's night time show the moon phase emoji instead
	hour=$(date +"%H")
	if { [ "$hour" -gt 19 ] || [ "$hour" -lt 6 ] ;}
	then
		format="?format=%m+++%f"
	else
		format="?format=%c%f"
	fi

	if [ $timer -eq 1 ]
	then
		weather="$(curl -s "https://wttr.in/$location$format" |
			sed "s/\(^.\)..\(.*\)/\1\2/ ; s/\+//")$delimeter"
	fi
	echo "$weather"
	[ $timer -lt $updatetime ] && timer=$((timer+1)) || timer=1

	# If weather could't be fetched
	echo "$weather" | grep -qo "Â°" || weather=""; return
}

# This procedure sets the uptime with an emoji based
# on how long your system has been running
set_uptime() {
	uptime="$(uptime | cut -d ',' -f1 | sed 's/.*up/ Up/' | tr -s ' ' |
		sed "s/\(..\):\(..\)/\1h \2m/")"

	# uptime > 4h20
	[ "$(echo "$uptime" | tr -dc '[:digit:]')" -gt 420 ] && uptime_emoji="ðŸ« "

	# uptime > 1 day
	echo "$uptime" | grep -q day && uptime_emoji="â™¿"

	uptime="$uptime_emoji$uptime$delimeter"
}

# This procedure sets your battery life and normalizes it if you have a
# charging limit set to 80% for example. If your battery is low then the
# low battery emoji will be used, if it is high the high battery one...
# If no battery is found do nothing
set_battery() {
	if [ -r /sys/class/power_supply/BAT0/capacity ]
	then
		battery=$(cat /sys/class/power_supply/BAT0/capacity)
	else
		battery=""   # If you disconnected your battery
		return
	fi

	if [ "$battery" -lt 25 ]
	then
		battery_emoji="$battery_emoji_low"
	else
		battery_emoji="$battery_emoji_high"
	fi

	# Normalize battery if needed
	if [ -f /sys/class/power_supply/BAT0/charge_stop_threshold ]
	then
		maxcharge="$(cat /sys/class/power_supply/BAT0/charge_stop_threshold)"
		coefficient="$(echo "scale=3; 100 / $maxcharge" | bc)"
		# divide by 1 to get the scale to 0 lmao
		battery="$battery_emoji$(echo "($battery * $coefficient)/1" | bc)%$delimeter"
	else
		battery="$battery_emoji$battery%$delimeter"
	fi
}

while [ "$(pgrep -x dwm)" ]; do

	# Here we need to use sed to add the emojis because otherwise
	# the emojis will show up even if no song is playing
	song="$(ncmpcpp --quiet --current-song=' %20a - %25t ' |
		sed "s/^/$music_emoji/ ; s/ $/$delimeter/ ")"

	set_weather

	set_uptime

	set_battery

	# man date for more formats
	date="$date_emoji $(date +"%a %d/%m/%y")$delimeter" # wed 28/07/2021

	# The time doesn't have a delimiter since it's the right most module
	# 0-24 with a.m p.m
	time="$time_emoji $(date +"%H:%M")"

	xsetroot -name " $song$weather$battery$uptime$date$time "

	sleep 1
done
